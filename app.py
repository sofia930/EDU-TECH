from flask import Flask, render_template, request, redirect, session, url_for
import sqlite3
import os
import pandas as pd

app = Flask(__name__)
app.secret_key = "supersecreto"

# Rutas de archivos
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DB_PATH = os.path.join(BASE_DIR, 'database.db')
DATASET_PATH = os.path.join(BASE_DIR, 'dataset', 'datos.csv')

# 游늷 Verificar la estructura de la base de datos
def verificar_base_datos():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Tabla de usuarios
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id_usuario INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        contrase침a TEXT NOT NULL,
        nombre TEXT NOT NULL,
        apellido TEXT NOT NULL,
        matematicas INTEGER,
        historia INTEGER,
        fisica INTEGER,
        quimica INTEGER,
        biologia INTEGER,
        ingles INTEGER,
        geografia INTEGER
    )
    """)

    # Tabla de respuestas (Guarda respuestas por usuario)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS respuestas (
        id_usuario INTEGER,
        pregunta TEXT NOT NULL,
        respuesta TEXT,
        PRIMARY KEY (id_usuario, pregunta),
        FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
    )
    """)

    conn.commit()
    conn.close()

verificar_base_datos()

# 游늷 Preguntas de la encuesta
preguntas = [
    {"texto": "Tengo fama de decir lo que pienso claramente y sin rodeos.", "estilo": "Pragm치tico"},
    {"texto": "Estoy seguro/a de lo que es bueno y malo, lo que est치 bien y lo que est치 mal.", "estilo": "Te칩rico"},
    {"texto": "Muchas veces act칰o sin mirar las consecuencias.", "estilo": "Activo"},
    {"texto": "Normalmente trato de resolver los problemas met칩dicamente y paso a paso.", "estilo": "Te칩rico"},
    {"texto": "Creo que los formalismos coartan y limitan la actuaci칩n libre de las personas.", "estilo": "Activo"},
]

# 游늷 Ruta principal (Muestra la bienvenida)
@app.route('/')
def home():
    return render_template("bienvenida.html")

# 游늷 Ruta de registro
@app.route("/registro", methods=["GET", "POST"])
def registro():
    if request.method == "POST":
        email = request.form.get("email").strip().lower()
        contrase침a = request.form.get("contrase침a").strip()
        nombre = request.form.get("nombre").strip()
        apellido = request.form.get("apellido").strip()

        # Obtener las calificaciones
        matematicas = request.form.get("matematicas")
        historia = request.form.get("historia")
        fisica = request.form.get("fisica")
        quimica = request.form.get("quimica")
        biologia = request.form.get("biologia")
        ingles = request.form.get("ingles")
        geografia = request.form.get("geografia")

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # Verificar si el usuario ya existe
        cursor.execute("SELECT * FROM usuarios WHERE email = ?", (email,))
        usuario_existente = cursor.fetchone()

        if usuario_existente:
            conn.close()
            return render_template("registro.html", error="丘멆잺 Este email ya est치 registrado. Intenta iniciar sesi칩n.")

        # Insertar el nuevo usuario en SQLite
        cursor.execute("""
            INSERT INTO usuarios (email, contrase침a, nombre, apellido, matematicas, historia, fisica, quimica, biologia, ingles, geografia) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (email, contrase침a, nombre, apellido, matematicas, historia, fisica, quimica, biologia, ingles, geografia))

        conn.commit()
        conn.close()

        return redirect(url_for("login"))  # Redirigir al login despu칠s de registrarse

    return render_template("registro.html")

# 游늷 Ruta de login
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form["email"].strip().lower()
        contrase침a = request.form["contrase침a"]

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id_usuario, nombre, apellido FROM usuarios WHERE email = ? AND contrase침a = ?", (email, contrase침a))
        usuario = cursor.fetchone()
        conn.close()

        if usuario:
            session["usuario_id"] = usuario[0]
            session["nombre"] = usuario[1]
            session["apellido"] = usuario[2]
            session["email"] = email
            return redirect(url_for("encuesta"))
        else:
            return render_template("login.html", error="丘멆잺 Email o contrase침a incorrectos")
    return render_template("login.html")

# 游늷 Ruta de la encuesta
@app.route('/encuesta', methods=['GET', 'POST'])
def encuesta():
    if "usuario_id" not in session:
        return redirect(url_for("login"))

    usuario_id = session["usuario_id"]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Obtener respuestas guardadas del usuario
    cursor.execute("SELECT pregunta, respuesta FROM respuestas WHERE id_usuario = ?", (usuario_id,))
    respuestas_guardadas = dict(cursor.fetchall())
    conn.close()

    return render_template("encuesta.html", preguntas=preguntas, respuestas=respuestas_guardadas)

# 游늷 Guardar respuestas
@app.route('/guardar_respuestas', methods=['POST'])
def guardar_respuestas():
    if "usuario_id" not in session:
        return redirect(url_for("login"))

    usuario_id = session["usuario_id"]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    for i, pregunta in enumerate(preguntas):
        respuesta = request.form.get(f'pregunta{i}')
        if respuesta:
            cursor.execute("""
                INSERT INTO respuestas (id_usuario, pregunta, respuesta)
                VALUES (?, ?, ?)
                ON CONFLICT(id_usuario, pregunta) 
                DO UPDATE SET respuesta = excluded.respuesta
            """, (usuario_id, pregunta["texto"], respuesta))

    conn.commit()
    conn.close()

    return redirect(url_for("ver_progreso"))

# 游늷 Ruta para ver el progreso
@app.route("/ver_progreso")
def ver_progreso():
    if "usuario_id" not in session:
        return redirect(url_for("login"))

    usuario_id = session["usuario_id"]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT pregunta, respuesta FROM respuestas WHERE id_usuario = ?", (usuario_id,))
    respuestas = cursor.fetchall()
    conn.close()

    return render_template("progreso.html", respuestas=respuestas)

# 游늷 Ruta de cerrar sesi칩n
@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

if __name__ == '__main__':
    app.run(debug=True)
